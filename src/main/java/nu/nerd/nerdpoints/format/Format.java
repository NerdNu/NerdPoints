package nu.nerd.nerdpoints.format;

import java.util.ArrayList;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;

// ----------------------------------------------------------------------------
/**
 * Generates text by substituion of variables into a format string.
 * 
 * Format strings are pre-parsed into a sequence of {@link Segment}s.
 */
public class Format {
    // ------------------------------------------------------------------------
    /**
     * Constructor.
     * 
     * @param format the format specifier; variables are surrounded by '%' and
     *        "%%" signifies a literal '%' character.
     * @throws IllegalArgumentException if the format string has mismatched '%'
     *         characters.
     */
    public Format(String format) {
        _format = format;

        StringBuilder segment = new StringBuilder();
        // True if inside a %variable% reference:
        boolean inVar = false;
        for (int i = 0; i < format.length(); ++i) {
            char c = format.charAt(i);
            if (c == '%') {
                if (inVar) {
                    // End this variable reference.
                    inVar = false;
                    String variableName = segment.toString();
                    segment.setLength(0);
                    _variables.add(variableName);
                    _segments.add(new VariableSegment(variableName));
                } else {
                    // Non-variable, literal text.
                    char next = (i + 1 < format.length()) ? format.charAt(i + 1) : '\0';
                    if (next == '%') {
                        // "%%" => literal '%'
                        segment.append(c);
                        ++i;
                    } else {
                        // End this literal segment; start a variable.
                        inVar = true;
                        if (segment.length() > 0) {
                            String literal = segment.toString();
                            segment.setLength(0);
                            _segments.add(new StringSegment(literal));
                        }
                    }
                }
            } else {
                segment.append(c);
            }
        } // for

        // Last segment.
        if (inVar) {
            // Mis-matched % at start of variable reference becomes literal.
            segment.insert(0, '%');
        }

        if (segment.length() > 0) {
            _segments.add(new StringSegment(segment.toString()));
        }
    } // Format ctor

    // ------------------------------------------------------------------------
    /**
     * Expand the variables in the specified Scope into this Format to produce a
     * String.
     * 
     * @param scope the Scope.
     */
    public String expand(Scope scope) {
        StringBuilder builder = new StringBuilder(2 * _format.length());
        for (Segment segment : _segments) {
            builder.append(segment.getText(scope));
        }
        return builder.toString();
    }

    // ------------------------------------------------------------------------
    /**
     * Return the set of names of variables referenced by this format.
     * 
     * @return the set of names of variables referenced by this format.
     */
    public Set<String> getVariables() {
        return _variables;
    }

    // ------------------------------------------------------------------------
    /**
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return _format;
    }

    // ------------------------------------------------------------------------
    /**
     * @see java.lang.Object#hashCode()
     * 
     *      Generated by Eclipse.
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((_format == null) ? 0 : _format.hashCode());
        return result;
    }

    // ------------------------------------------------------------------------
    /**
     * @see java.lang.Object#equals(java.lang.Object)
     * 
     *      Generated by Eclipse.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof Format)) {
            return false;
        }
        Format other = (Format) obj;
        if (_format == null) {
            if (other._format != null) {
                return false;
            }
        } else if (!_format.equals(other._format)) {
            return false;
        }
        return true;
    }

    // ------------------------------------------------------------------------
    /**
     * Dump the internal state of this Format, for testing.
     * 
     * @param scope a test Scope for resolving variables.
     */
    public void dump(Scope scope) {
        System.out.println("================");
        System.out.println(_format);
        System.out.println("================");
        for (int i = 0; i < _segments.size(); ++i) {
            Segment segment = _segments.get(i);
            System.out.println(i + ": " + segment.getClass().getSimpleName() + " " + segment.getText(scope));
        }
        System.out.println("----------------");
        System.out.println("Variables: " + _variables.stream().collect(Collectors.joining(" ")));
        System.out.println("----------------");
        System.out.println(expand(scope));
    }

    // ------------------------------------------------------------------------
    /**
     * The format specifier used to instantiate this Format.
     */
    protected String _format;

    /**
     * The sequence of segments in the format string, in the order they will
     * will be rendered to the result.
     */
    protected ArrayList<Segment> _segments = new ArrayList<>();

    /**
     * The sorted set of variables referenced by this Format.
     */
    protected Set<String> _variables = new TreeSet<>();

    // ------------------------------------------------------------------------
    /**
     * Testing.
     */
    public static void main(String[] args) {
        Scope scope = new Scope();
        new Format("").dump(scope);
        new Format("%%").dump(scope);
        new Format("%%%").dump(scope);
        new Format("a%x%%y%%").dump(scope);

        scope.setText("x", "12345");
        new Format("a%x%%y%%").dump(scope);
    }
} // class Format